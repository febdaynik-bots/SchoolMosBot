from aiogram import F, types, Router
from school_mos import AUTH

from utils.dnevnik import CustomHomework
from keyboards.list_homeworks import list_homeworks_markup
from keyboards.default import back_markup

router = Router()


@router.callback_query(F.data == 'menu:homeworks')
async def get_homeworks_callback(call: types.CallbackQuery, student: AUTH):
	if student is None:
		return await call.answer('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ')

	try:
		homeworks, start_of_week, end_of_week = await student.homework.get_by_week()
	except Exception:
		return await call.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

	return await call.message.edit_text(f'–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({start_of_week} - {end_of_week})',
										reply_markup=list_homeworks_markup(homeworks))


@router.callback_query(F.data.startswith('hw:info:'))
async def get_info_homework_callback(call: types.CallbackQuery, student: AUTH):
	offset, homework_id = call.data.removeprefix('hw:info:').split(':')

	if student is None:
		return await call.answer('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ')

	try:
		homework = await student.homework.get_by_id(homework_id=homework_id)
	except Exception as e:
		return await call.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

	return await call.message.edit_text(f'üèò –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ <b>{homework.date}</b> –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{homework.name}</b>\n\n'
										f'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>{homework.teacher.last_name} {homework.teacher.first_name} {homework.teacher.middle_name}</b>\n\n'
										f'–ó–∞–¥–∞–Ω–∏–µ: 	{homework.homework}',
										reply_markup=back_markup('¬´ –ù–∞–∑–∞–¥', callback_data=f'hw:p:back:{offset}'))


@router.callback_query(F.data.startswith('hw:p:back:'))
@router.callback_query(F.data.startswith('hw:p:next:'))
async def pagination_homeworks_callback(call: types.CallbackQuery, student: AUTH):
	offset = call.data.removeprefix('hw:p:back:').removeprefix('hw:p:next:')

	if student is None:
		return await call.answer('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ')

	try:
		homeworks, start_of_week, end_of_week = await student.homework.get_by_week()
	except Exception as e:
		return await call.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

	return await call.message.edit_reply_markup(reply_markup=list_homeworks_markup(
		homeworks, offset=int(offset)
	))
